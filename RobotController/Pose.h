//============================================================================
/// \file    Pose.h
/// \authors Florian Bauer <florian.bauer.dev@gmail.com>
/// \date    2021-01-15
/// \brief   Definition of the Pose Data Type for the RobotController Feature
/// \note    Code generated by sila2codegenerator 0.3.3-dev
//============================================================================
#ifndef POSE_H
#define POSE_H

#include "RobotController.grpc.pb.h"

/**
 * @brief Convenience type for the DataType_Pose Protobuf Message
 */
struct Pose {
    SiLA2::CReal X;
    SiLA2::CReal Y;
    SiLA2::CReal Z;
    SiLA2::CReal OriX;
    SiLA2::CReal OriY;
    SiLA2::CReal OriZ;
    SiLA2::CReal OriW;

    [[nodiscard]] sila2::de::fau::robot::robotcontroller::v1::DataType_Pose::Pose_Struct*
    makeNestedMessage() const {
        using sila2::de::fau::robot::robotcontroller::v1::DataType_Pose;
        auto result = new DataType_Pose::Pose_Struct{};
        result->set_allocated_x(X.toProtoMessagePtr());
        result->set_allocated_y(Y.toProtoMessagePtr());
        result->set_allocated_z(Z.toProtoMessagePtr());
        result->set_allocated_orix(OriX.toProtoMessagePtr());
        result->set_allocated_oriy(OriY.toProtoMessagePtr());
        result->set_allocated_oriz(OriZ.toProtoMessagePtr());
        result->set_allocated_oriw(OriW.toProtoMessagePtr());
        return result;
    }

    /**
     * @brief Convert this convenience type to a SiLAFramework type, i.e. the
     * Protobuf Message
     *
     * @return The SiLAFramework equivalent of this type as a Protobuf Message
     */
    [[nodiscard]] sila2::de::fau::robot::robotcontroller::v1::DataType_Pose
    toProtoMessage() const {
        using sila2::de::fau::robot::robotcontroller::v1::DataType_Pose;
        auto result = DataType_Pose{};
        result.set_allocated_pose(makeNestedMessage());
        return result;
    }

    /**
     * @brief Convert this convenience type to a SiLAFramework type, i.e. the
     * Protobuf Message
     *
     * @return The SiLAFramework equivalent of this type as a Protobuf Message
     * pointer
     */
    [[nodiscard]] sila2::de::fau::robot::robotcontroller::v1::DataType_Pose*
    toProtoMessagePtr() const {
        using sila2::de::fau::robot::robotcontroller::v1::DataType_Pose;
        auto result = new DataType_Pose{};
        result->set_allocated_pose(makeNestedMessage());
        return result;
    }
};

#endif  // POSE_H
