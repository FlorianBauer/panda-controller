//============================================================================
/// \file    RobotControllerImpl.h
/// \authors Florian Bauer <florian.bauer.dev@gmail.com>
/// \date    2021-01-20
/// \brief   Declaration of the CRobotControllerImpl class
/// \note    Code generated by sila2codegenerator 0.3.3-dev
//============================================================================
#ifndef ROBOTCONTROLLERIMPL_H
#define ROBOTCONTROLLERIMPL_H

#include <ros/ros.h>
#include <sila_cpp/server/SiLAFeature.h>
#include <sila_cpp/data_types.h>
#include <sila_cpp/server/command/UnobservableCommand.h>
#include <sila_cpp/server/command/ObservableCommand.h>
#include <sila_cpp/server/property/UnobservableProperty.h>
#include "Pose.h"
#include "RobotController.grpc.pb.h"

/**
 * @brief The CRobotControllerImpl class implements the RobotController feature
 *
 * @details Controller for a Panda robot arm.
 */
class CRobotControllerImpl final : public SiLA2::CSiLAFeature<sila2::de::fau::robot::robotcontroller::v1::RobotController> {
    // Using declarations for the Feature's Commands and Properties
    using GetCurrentFrameCommand =
            SiLA2::CUnobservableCommandManager<&CRobotControllerImpl::RequestGetCurrentFrame>;
    using GetCurrentFrameWrapper = SiLA2::CUnobservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::GetCurrentFrame_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::GetCurrentFrame_Responses>;
    using GetCurrentPoseCommand =
            SiLA2::CUnobservableCommandManager<&CRobotControllerImpl::RequestGetCurrentPose>;
    using GetCurrentPoseWrapper = SiLA2::CUnobservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::GetCurrentPose_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::GetCurrentPose_Responses>;
    using MoveToPoseCommand = SiLA2::CObservableCommandManager<
            &CRobotControllerImpl::RequestMoveToPose,
            &CRobotControllerImpl::RequestMoveToPose_Info,
            &CRobotControllerImpl::RequestMoveToPose_Result>;
    using MoveToPoseWrapper = SiLA2::CObservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::MoveToPose_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::MoveToPose_Responses>;
    using MoveToSiteCommand = SiLA2::CObservableCommandManager<
            &CRobotControllerImpl::RequestMoveToSite,
            &CRobotControllerImpl::RequestMoveToSite_Info,
            &CRobotControllerImpl::RequestMoveToSite_Result>;
    using MoveToSiteWrapper = SiLA2::CObservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::MoveToSite_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::MoveToSite_Responses>;
    using RetreatCommand = SiLA2::CObservableCommandManager<
            &CRobotControllerImpl::RequestRetreat,
            &CRobotControllerImpl::RequestRetreat_Info,
            &CRobotControllerImpl::RequestRetreat_Result>;
    using RetreatWrapper = SiLA2::CObservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::Retreat_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::Retreat_Responses>;
    using ApproachToCommand = SiLA2::CObservableCommandManager<
            &CRobotControllerImpl::RequestApproachTo,
            &CRobotControllerImpl::RequestApproachTo_Info,
            &CRobotControllerImpl::RequestApproachTo_Result>;
    using ApproachToWrapper = SiLA2::CObservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::ApproachTo_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::ApproachTo_Responses>;
    using TransportPlateCommand = SiLA2::CObservableCommandManager<
            &CRobotControllerImpl::RequestTransportPlate,
            &CRobotControllerImpl::RequestTransportPlate_Info,
            &CRobotControllerImpl::RequestTransportPlate_Result>;
    using TransportPlateWrapper = SiLA2::CObservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::TransportPlate_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::TransportPlate_Responses>;
    using PickPlateCommand =
            SiLA2::CUnobservableCommandManager<&CRobotControllerImpl::RequestPickPlate>;
    using PickPlateWrapper = SiLA2::CUnobservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::PickPlate_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::PickPlate_Responses>;
    using PlacePlateCommand =
            SiLA2::CUnobservableCommandManager<&CRobotControllerImpl::RequestPlacePlate>;
    using PlacePlateWrapper = SiLA2::CUnobservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::PlacePlate_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::PlacePlate_Responses>;
    using CheckOccupiedCommand =
            SiLA2::CUnobservableCommandManager<&CRobotControllerImpl::RequestCheckOccupied>;
    using CheckOccupiedWrapper = SiLA2::CUnobservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::CheckOccupied_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::CheckOccupied_Responses>;
    using FollowPathCommand =
            SiLA2::CUnobservableCommandManager<&CRobotControllerImpl::RequestFollowPath>;
    using FollowPathWrapper = SiLA2::CUnobservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::FollowPath_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::FollowPath_Responses>;
    using SetToFrameCommand =
            SiLA2::CUnobservableCommandManager<&CRobotControllerImpl::RequestSetToFrame>;
    using SetToFrameWrapper = SiLA2::CUnobservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::SetToFrame_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::SetToFrame_Responses>;
    using FollowFramesCommand =
            SiLA2::CUnobservableCommandManager<&CRobotControllerImpl::RequestFollowFrames>;
    using FollowFramesWrapper = SiLA2::CUnobservableCommandWrapper<
            sila2::de::fau::robot::robotcontroller::v1::FollowFrames_Parameters,
            sila2::de::fau::robot::robotcontroller::v1::FollowFrames_Responses>;

public:
    /**
     * @brief C'tor
     *
     * @param parent The SiLA server instance that contains this Feature
     */
    explicit CRobotControllerImpl(SiLA2::CSiLAServer* parent);

    /**
     * @brief GetCurrentFrame Command
     *
     * @details Get the current joint values.
     *
     * @param Command The current GetCurrentFrame Command Execution Wrapper
     * It contains the following Parameters:
     * None
     *
     * @return GetCurrentFrame_Responses The Command Response
     * It contains the following fields:
     * @li Frame The absolute joint values.
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::GetCurrentFrame_Responses GetCurrentFrame(GetCurrentFrameWrapper* command);

    /**
     * @brief GetCurrentPose Command
     *
     * @details Get the current position and orientation of the robot hand.
     *
     * @param Command The current GetCurrentPose Command Execution Wrapper
     * It contains the following Parameters:
     * None
     *
     * @return GetCurrentPose_Responses The Command Response
     * It contains the following fields:
     * @li Pose The pose to query.
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::GetCurrentPose_Responses GetCurrentPose(GetCurrentPoseWrapper* command);

    /**
     * @brief MoveToPose Command
     *
     * @details Move to a given position and with a given orientation.
     *
     * @param Command The current MoveToPose Command Execution Wrapper
     * It contains the following Parameters:
     * @li Pose The pose to move to.
     *
     * @return MoveToPose_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::MoveToPose_Responses MoveToPose(MoveToPoseWrapper* command);

    /**
     * @brief MoveToSite Command
     *
     * @details Move to a given site without approaching.
     *
     * @param Command The current MoveToSite Command Execution Wrapper
     * It contains the following Parameters:
     * @li SiteId Site to move to.
     *
     * @return MoveToSite_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::MoveToSite_Responses MoveToSite(MoveToSiteWrapper* command);

    /**
     * @brief Retreat Command
     *
     * @details Carefully pull back from the current site, if not already retracted.
     *
     * @param Command The current Retreat Command Execution Wrapper
     * It contains the following Parameters:
     * None
     *
     * @return Retreat_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::Retreat_Responses Retreat(RetreatWrapper* command);

    /**
     * @brief ApproachTo Command
     *
     * @details Moving to the safe pose to approach a site (without changing gripping).
     *
     * @param Command The current ApproachTo Command Execution Wrapper
     * It contains the following Parameters:
     * @li SiteId Site to approach.
     *
     * @return ApproachTo_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::ApproachTo_Responses ApproachTo(ApproachToWrapper* command);

    /**
     * @brief TransportPlate Command
     *
     * @details Transports a plate between the two given sites.
     *
     * @param Command The current TransportPlate Command Execution Wrapper
     * It contains the following Parameters:
     * @li OriginSiteId Site to move the plate from.
     * @li DestinationSiteId Site to move the plate to.
     * @li PlateType The plate type to grab.
     *
     * @return TransportPlate_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::TransportPlate_Responses TransportPlate(TransportPlateWrapper* command);

    /**
     * @brief PickPlate Command
     *
     * @details Pick up a plate from a given site.
     *
     * @param Command The current PickPlate Command Execution Wrapper
     * It contains the following Parameters:
     * @li SiteId Site to pick plate from.
     * @li PlateType The plate type to grab.
     *
     * @return PickPlate_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::PickPlate_Responses PickPlate(PickPlateWrapper* command);

    /**
     * @brief PlacePlate Command
     *
     * @details Place a plate on a given site.
     *
     * @param Command The current PlacePlate Command Execution Wrapper
     * It contains the following Parameters:
     * @li SiteId Site to place the plate on.
     * @li PlateType The plate type to grab.
     *
     * @return PlacePlate_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::PlacePlate_Responses PlacePlate(PlacePlateWrapper* command);

    /**
     * @brief CheckOccupied Command
     *
     * @details Check if the given site is occupied with a sample.
     *
     * @param Command The current CheckOccupied Command Execution Wrapper
     * It contains the following Parameters:
     * @li SiteId The Site to check.
     *
     * @return CheckOccupied_Responses The Command Response
     * It contains the following fields:
     * @li IsOccupied Boolean describing if site is occupied or not.
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::CheckOccupied_Responses CheckOccupied(CheckOccupiedWrapper* command);

    /**
     * @brief FollowPath Command
     *
     * @details Follows a path of poses.
     *
     * @param Command The current FollowPath Command Execution Wrapper
     * It contains the following Parameters:
     * @li PoseList A list of poses to follow along.
     *
     * @return FollowPath_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::FollowPath_Responses FollowPath(FollowPathWrapper* command);

    /**
     * @brief SetToFrame Command
     *
     * @details Sets the absolute joint values.
     *
     * @param Command The current SetToFrame Command Execution Wrapper
     * It contains the following Parameters:
     * @li Frame The frame to set the joints to.
     *
     * @return SetToFrame_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::SetToFrame_Responses SetToFrame(SetToFrameWrapper* command);

    /**
     * @brief FollowFrames Command
     *
     * @details Successively set the absolute joint values.
     *
     * @param Command The current FollowFrames Command Execution Wrapper
     * It contains the following Parameters:
     * @li FrameList The list of frames to sequence.
     *
     * @return FollowFrames_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::robotcontroller::v1::FollowFrames_Responses FollowFrames(FollowFramesWrapper* command);

private:
    GetCurrentFrameCommand m_GetCurrentFrameCommand;
    GetCurrentPoseCommand m_GetCurrentPoseCommand;
    MoveToPoseCommand m_MoveToPoseCommand;
    MoveToSiteCommand m_MoveToSiteCommand;
    RetreatCommand m_RetreatCommand;
    ApproachToCommand m_ApproachToCommand;
    TransportPlateCommand m_TransportPlateCommand;
    PickPlateCommand m_PickPlateCommand;
    PlacePlateCommand m_PlacePlateCommand;
    CheckOccupiedCommand m_CheckOccupiedCommand;
    FollowPathCommand m_FollowPathCommand;
    SetToFrameCommand m_SetToFrameCommand;
    FollowFramesCommand m_FollowFramesCommand;
    ros::NodeHandle m_RosNode;
};

#endif  // ROBOTCONTROLLERIMPL_H
