//============================================================================
/// \file    RobotControllerImpl.cpp
/// \authors Florian Bauer <florian.bauer.dev@gmail.com>
/// \date    2021-01-16
/// \brief   Declaration of the CRobotControllerImpl class
/// \note    Code generated by sila2codegenerator 0.3.3-dev
//============================================================================

#include "RobotControllerImpl.h"
#include <sila_cpp/common/logging.h>

using namespace sila2::de::fau::robot::robotcontroller::v1;

CRobotControllerImpl::CRobotControllerImpl(SiLA2::CSiLAServer* parent)
: CSiLAFeature{parent},
m_MoveToPoseCommand{this, "MoveToPose"},
m_MoveToSiteCommand{this, "MoveToSite"},
m_RetreatCommand{this, "Retreat"},
m_ApproachToCommand{this, "ApproachTo"},
m_TransportPlateCommand{this, "TransportPlate"},
m_PickPlateCommand{this, "PickPlate"},
m_PlacePlateCommand{this, "PlacePlate"},
m_CheckOccupiedCommand{this, "CheckOccupied"},
m_FollowPathCommand{this, "FollowPath"},
m_SetToFrameCommand{this, "SetToFrame"},
m_FollowFramesCommand{this, "FollowFrames"},
m_GetCurrentPoseProperty{this,
    {/*initial value*/}, "GetCurrentPose"}
{
    m_MoveToPoseCommand.setExecutor(this, &CRobotControllerImpl::MoveToPose);
    m_MoveToSiteCommand.setExecutor(this, &CRobotControllerImpl::MoveToSite);
    m_RetreatCommand.setExecutor(this, &CRobotControllerImpl::Retreat);
    m_ApproachToCommand.setExecutor(this, &CRobotControllerImpl::ApproachTo);
    m_TransportPlateCommand.setExecutor(this, &CRobotControllerImpl::TransportPlate);
    m_PickPlateCommand.setExecutor(this, &CRobotControllerImpl::PickPlate);
    m_PlacePlateCommand.setExecutor(this, &CRobotControllerImpl::PlacePlate);
    m_CheckOccupiedCommand.setExecutor(this, &CRobotControllerImpl::CheckOccupied);
    m_FollowPathCommand.setExecutor(this, &CRobotControllerImpl::FollowPath);
    m_SetToFrameCommand.setExecutor(this, &CRobotControllerImpl::SetToFrame);
    m_FollowFramesCommand.setExecutor(this, &CRobotControllerImpl::FollowFrames);
}

MoveToPose_Responses CRobotControllerImpl::MoveToPose(MoveToPoseWrapper* command) {
    const auto request = command->parameters();
    qDebug() << "Request contains:" << request;
    // TODO: Validate request parameters...

    // TODO: Write actual Command implementation logic...
    const double NUM_STEPS = 10.0;
    for (int i = 0; i <= NUM_STEPS; ++i) {
        // do stuff...
        command->setExecutionInfo(SiLA2::CReal{i / NUM_STEPS});
    }

    auto Response = MoveToPose_Responses{};
    // TODO: Fill the response fields
    return Response;
}

MoveToSite_Responses CRobotControllerImpl::MoveToSite(MoveToSiteWrapper* command) {
    const auto request = command->parameters();
    qDebug() << "Request contains:" << request;
    // TODO: Validate request parameters...

    // TODO: Write actual Command implementation logic...
    const double NUM_STEPS = 10.0;
    for (int i = 0; i <= NUM_STEPS; ++i) {
        // do stuff...
        command->setExecutionInfo(SiLA2::CReal{i / NUM_STEPS});
    }

    auto Response = MoveToSite_Responses{};
    // TODO: Fill the response fields
    return Response;
}

Retreat_Responses CRobotControllerImpl::Retreat(RetreatWrapper* command) {
    const auto request = command->parameters();
    qDebug() << "Request contains:" << request;
    // TODO: Validate request parameters...

    // TODO: Write actual Command implementation logic...
    const double NUM_STEPS = 10.0;
    for (int i = 0; i <= NUM_STEPS; ++i) {
        // do stuff...
        command->setExecutionInfo(SiLA2::CReal{i / NUM_STEPS});
    }

    auto Response = Retreat_Responses{};
    // TODO: Fill the response fields
    return Response;
}

ApproachTo_Responses CRobotControllerImpl::ApproachTo(ApproachToWrapper* command) {
    const auto request = command->parameters();
    qDebug() << "Request contains:" << request;
    // TODO: Validate request parameters...

    // TODO: Write actual Command implementation logic...
    const double NUM_STEPS = 10.0;
    for (int i = 0; i <= NUM_STEPS; ++i) {
        // do stuff...
        command->setExecutionInfo(SiLA2::CReal{i / NUM_STEPS});
    }

    auto Response = ApproachTo_Responses{};
    // TODO: Fill the response fields
    return Response;
}

TransportPlate_Responses CRobotControllerImpl::TransportPlate(TransportPlateWrapper* command) {
    const auto request = command->parameters();
    qDebug() << "Request contains:" << request;
    // TODO: Validate request parameters...

    // TODO: Write actual Command implementation logic...
    const double NUM_STEPS = 10.0;
    for (int i = 0; i <= NUM_STEPS; ++i) {
        // do stuff...
        command->setExecutionInfo(SiLA2::CReal{i / NUM_STEPS});
    }

    auto Response = TransportPlate_Responses{};
    // TODO: Fill the response fields
    return Response;
}

PickPlate_Responses CRobotControllerImpl::PickPlate(PickPlateWrapper* command) {
    const auto request = command->parameters();
    qDebug() << "Request contains:" << request;
    // TODO: Validate request parameters...

    // TODO: Write actual Command implementation logic...

    auto Response = PickPlate_Responses{};
    // TODO: Fill the response fields
    return Response;
}

PlacePlate_Responses CRobotControllerImpl::PlacePlate(PlacePlateWrapper* command) {
    const auto Request = command->parameters();
    qDebug() << "Request contains:" << Request;
    // TODO: Validate request parameters...

    // TODO: Write actual Command implementation logic...

    auto Response = PlacePlate_Responses{};
    // TODO: Fill the response fields
    return Response;
}

CheckOccupied_Responses CRobotControllerImpl::CheckOccupied(CheckOccupiedWrapper* command) {
    const auto request = command->parameters();
    qDebug() << "Request contains:" << request;
    // TODO: Validate request parameters...

    // TODO: Write actual Command implementation logic...

    auto Response = CheckOccupied_Responses{};
    // TODO: Fill the response fields
    return Response;
}

FollowPath_Responses CRobotControllerImpl::FollowPath(FollowPathWrapper* command) {
    const auto Request = command->parameters();
    qDebug() << "Request contains:" << Request;
    // TODO: Validate request parameters...

    // TODO: Write actual Command implementation logic...

    auto Response = FollowPath_Responses{};
    // TODO: Fill the response fields
    return Response;
}

SetToFrame_Responses CRobotControllerImpl::SetToFrame(SetToFrameWrapper* command) {
    const auto Request = command->parameters();
    qDebug() << "Request contains:" << Request;
    // TODO: Validate request parameters...

    // TODO: Write actual Command implementation logic...

    auto Response = SetToFrame_Responses{};
    // TODO: Fill the response fields
    return Response;
}

FollowFrames_Responses CRobotControllerImpl::FollowFrames(FollowFramesWrapper* command) {
    const auto request = command->parameters();
    qDebug() << "Request contains:" << request;
    // TODO: Validate request parameters...

    // TODO: Write actual Command implementation logic...

    auto response = FollowFrames_Responses{};
    // TODO: Fill the response fields
    return response;
}
