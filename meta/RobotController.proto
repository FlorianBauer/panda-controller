// This file is automatically generated by sila2lib.proto_builder.proto_builder version 0.2.0
// :generation date: 2021-01-15 00:50:58
//
// ---- PLEASE DO NOT MODIFY MANUALLY !! ---

syntax = "proto3";
import "SiLAFramework.proto";
package sila2.de.fau.robot.robotcontroller.v1;

// Feature: Robot Controller
//   Controller for a Panda robot arm.
service RobotController {
    // Move To Pose
    //   Move to a given position and with a given orientation.
    rpc MoveToPose(sila2.de.fau.robot.robotcontroller.v1.MoveToPose_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc MoveToPose_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc MoveToPose_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.de.fau.robot.robotcontroller.v1.MoveToPose_Responses) {}
    // Move To Site
    //   Move to a given site without approaching.
    rpc MoveToSite(sila2.de.fau.robot.robotcontroller.v1.MoveToSite_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc MoveToSite_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc MoveToSite_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.de.fau.robot.robotcontroller.v1.MoveToSite_Responses) {}
    // Retreat
    //   Carefully pull back from the current site, if not already retracted.
    rpc Retreat(sila2.de.fau.robot.robotcontroller.v1.Retreat_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc Retreat_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc Retreat_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.de.fau.robot.robotcontroller.v1.Retreat_Responses) {}
    // Approach To
    //   Moving to the safe pose to approach a site (without changing gripping).
    rpc ApproachTo(sila2.de.fau.robot.robotcontroller.v1.ApproachTo_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc ApproachTo_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc ApproachTo_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.de.fau.robot.robotcontroller.v1.ApproachTo_Responses) {}
    // Transport Plate
    //   Transports a plate between the two given sites.
    rpc TransportPlate(sila2.de.fau.robot.robotcontroller.v1.TransportPlate_Parameters) returns (sila2.org.silastandard.CommandConfirmation) {}
    rpc TransportPlate_Info(sila2.org.silastandard.CommandExecutionUUID) returns (stream sila2.org.silastandard.ExecutionInfo) {}
    rpc TransportPlate_Result(sila2.org.silastandard.CommandExecutionUUID) returns (sila2.de.fau.robot.robotcontroller.v1.TransportPlate_Responses) {}
    // Pick Plate
    //   Pick up a plate from a given site.
    rpc PickPlate(sila2.de.fau.robot.robotcontroller.v1.PickPlate_Parameters) returns (sila2.de.fau.robot.robotcontroller.v1.PickPlate_Responses) {}
    // Place Plate
    //   Place a plate on a given site.
    rpc PlacePlate(sila2.de.fau.robot.robotcontroller.v1.PlacePlate_Parameters) returns (sila2.de.fau.robot.robotcontroller.v1.PlacePlate_Responses) {}
    // Check Occupied
    //   Check if the given site is occupied with a sample.
    rpc CheckOccupied(sila2.de.fau.robot.robotcontroller.v1.CheckOccupied_Parameters) returns (sila2.de.fau.robot.robotcontroller.v1.CheckOccupied_Responses) {}
    // Follow Path
    //   Follows a path of poses.
    rpc FollowPath(sila2.de.fau.robot.robotcontroller.v1.FollowPath_Parameters) returns (sila2.de.fau.robot.robotcontroller.v1.FollowPath_Responses) {}
    // Set To Frame
    //   Sets the absolute joint values.
    rpc SetToFrame(sila2.de.fau.robot.robotcontroller.v1.SetToFrame_Parameters) returns (sila2.de.fau.robot.robotcontroller.v1.SetToFrame_Responses) {}
    // Follow Frames
    //   Successively set the absolute joint values.
    rpc FollowFrames(sila2.de.fau.robot.robotcontroller.v1.FollowFrames_Parameters) returns (sila2.de.fau.robot.robotcontroller.v1.FollowFrames_Responses) {}
    
    
}

// ----------------- Data Type definitions -----------------
// Frame
//   Absolute joint values describing a frame.
message DataType_Frame {
    // Constrained type, not reflected in protocol buffers
    repeated sila2.org.silastandard.Real Frame = 1;
}
// Site ID
//   The string identifier of the Site.
message DataType_SiteId {
    // Constrained type, not reflected in protocol buffers
    sila2.org.silastandard.String SiteId = 1;
}
// Pose
//   The pose of the gripper to reach the Site. The pose itself consists of two parts: The Position as vector (XYZ) and the
//   Orientation as Quaternion (XYZW).
message DataType_Pose {
    message Pose_Struct {
        // X
        //   The X position of the Site.
        // Constrained type, not reflected in protocol buffers
        sila2.org.silastandard.Real X = 1;
        // Y
        //   The Y position of the Site.
        // Constrained type, not reflected in protocol buffers
        sila2.org.silastandard.Real Y = 2;
        // Z
        //   The Z position defining the relative height.
        // Constrained type, not reflected in protocol buffers
        sila2.org.silastandard.Real Z = 3;
        // Orientation X
        //   The X value.
        sila2.org.silastandard.Real OriX = 4;
        // Orientation Y
        //   The Y value.
        sila2.org.silastandard.Real OriY = 5;
        // Orientation Z
        //   The Z value.
        sila2.org.silastandard.Real OriZ = 6;
        // Orientation W
        //   The W value.
        sila2.org.silastandard.Real OriW = 7;
    }
    sila2.de.fau.robot.robotcontroller.v1.DataType_Pose.Pose_Struct Pose = 1;
}

// ------ Command Parameter and Response definitions -------
message MoveToPose_Parameters {
    sila2.de.fau.robot.robotcontroller.v1.DataType_Pose Pose = 1;
}

message MoveToPose_Responses {
    
}

message MoveToSite_Parameters {
    sila2.de.fau.robot.robotcontroller.v1.DataType_SiteId Site = 1;
}

message MoveToSite_Responses {
    
}

message Retreat_Parameters {
    
}

message Retreat_Responses {
    
}

message ApproachTo_Parameters {
    sila2.de.fau.robot.robotcontroller.v1.DataType_SiteId Site = 1;
}

message ApproachTo_Responses {
    
}

message TransportPlate_Parameters {
    sila2.de.fau.robot.robotcontroller.v1.DataType_SiteId OriginSite = 1;
    sila2.de.fau.robot.robotcontroller.v1.DataType_SiteId DestinationSite = 2;
    sila2.org.silastandard.String PlateType = 3;
}

message TransportPlate_Responses {
    
}

message PickPlate_Parameters {
    sila2.de.fau.robot.robotcontroller.v1.DataType_SiteId Site = 1;
    sila2.org.silastandard.String PlateType = 2;
}

message PickPlate_Responses {
    
}

message PlacePlate_Parameters {
    sila2.de.fau.robot.robotcontroller.v1.DataType_SiteId Site = 1;
    sila2.org.silastandard.String PlateType = 2;
}

message PlacePlate_Responses {
    
}

message CheckOccupied_Parameters {
    sila2.de.fau.robot.robotcontroller.v1.DataType_SiteId SiteId = 1;
}

message CheckOccupied_Responses {
    sila2.org.silastandard.Boolean IsOccupied = 1;
}

message FollowPath_Parameters {
    repeated sila2.de.fau.robot.robotcontroller.v1.DataType_Pose PoseList = 1;
}

message FollowPath_Responses {
    
}

message SetToFrame_Parameters {
    sila2.de.fau.robot.robotcontroller.v1.DataType_Frame Frame = 1;
}

message SetToFrame_Responses {
    
}

message FollowFrames_Parameters {
    // Constrained type, not reflected in protocol buffers
    repeated sila2.de.fau.robot.robotcontroller.v1.DataType_Frame FrameList = 1;
}

message FollowFrames_Responses {
    
}


// ----------------- Metadata Definitions ------------------
