//============================================================================
/// \file    SiteManagerImpl.h
/// \authors Florian Bauer <florian.bauer.dev@gmail.com>
/// \date    2021-01-25
/// \brief   Declaration of the CSiteManagerImpl class
/// \note    Code generated by sila2codegenerator 0.3.3-dev
//============================================================================
#ifndef SITEMANAGERIMPL_H
#define SITEMANAGERIMPL_H

#include <map>
#include <filesystem>
#include <nlohmann/json.hpp>
#include <string>
#include <sila_cpp/server/SiLAFeature.h>
#include <sila_cpp/data_types.h>
#include <sila_cpp/server/command/UnobservableCommand.h>
#include <sila_cpp/server/property/UnobservableProperty.h>
#include "RelativeMove.h"
#include "Pose.h"
#include "Site.h"
#include "SiteManager.grpc.pb.h"

static const SiLA2::CDefinedExecutionError ERROR_SITE_ID_NOT_FOUND
{
    "SiteIdNotFound",
    "The given Site ID does not exist or could not be found."
};

/**
 * @brief The CSiteManagerImpl class implements the SiteManager feature
 *
 * @details Manager to set and remove sites which define the pick-up and drop locations
 * for the robot gripper.
 */
class CSiteManagerImpl final : public SiLA2::CSiLAFeature<sila2::de::fau::robot::sitemanager::v1::SiteManager> {
    // Using declarations for the Feature's Commands and Properties
    using GetSiteCommand = SiLA2::CUnobservableCommandManager<&CSiteManagerImpl::RequestGetSite>;
    using GetSiteWrapper = SiLA2::CUnobservableCommandWrapper<
            sila2::de::fau::robot::sitemanager::v1::GetSite_Parameters,
            sila2::de::fau::robot::sitemanager::v1::GetSite_Responses>;
    using SetSiteCommand = SiLA2::CUnobservableCommandManager<&CSiteManagerImpl::RequestSetSite>;
    using SetSiteWrapper = SiLA2::CUnobservableCommandWrapper<
            sila2::de::fau::robot::sitemanager::v1::SetSite_Parameters,
            sila2::de::fau::robot::sitemanager::v1::SetSite_Responses>;
    using DeleteSiteCommand = SiLA2::CUnobservableCommandManager<&CSiteManagerImpl::RequestDeleteSite>;
    using DeleteSiteWrapper = SiLA2::CUnobservableCommandWrapper<
            sila2::de::fau::robot::sitemanager::v1::DeleteSite_Parameters,
            sila2::de::fau::robot::sitemanager::v1::DeleteSite_Responses>;
    using SitesProperty = SiLA2::CUnobservablePropertyWrapper<
            std::vector<SiLA2::CString>, &CSiteManagerImpl::RequestGet_Sites>;

public:
    /**
     * @brief C'tor
     *
     * @param parent The SiLA server instance that contains this Feature
     */
    explicit CSiteManagerImpl(SiLA2::CSiLAServer* parent);

    /**
     * @brief GetSite Command
     *
     * @details Gets the site with the given ID.
     *
     * @param Command The current GetSite Command Execution Wrapper
     * It contains the following Parameters:
     * @li SiteId The site to get.
     *
     * @return GetSite_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::sitemanager::v1::GetSite_Responses GetSite(GetSiteWrapper* command);

    /**
     * @brief SetSite Command
     *
     * @details Adds or overwrites a site. The orientation is defined by an quaternion (XYZW).
     *
     * @param Command The current SetSite Command Execution Wrapper
     * It contains the following Parameters:
     * @li SiteId The site to set.
     * @li Pose The pose to reach the site.
     * @li Approach Defines a movement to approach an item on/inside the site
     * (e.g. to pick-up from above).
     * @li Retreat Defines a movement to retreat from an item on/inside the
     * site (e.g. to move sideways after placing something). If no retreat is
     * set, the reversed approach movement is used.
     *
     * @return SetSite_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::sitemanager::v1::SetSite_Responses SetSite(SetSiteWrapper* command);

    /**
     * @brief DeleteSite Command
     *
     * @details Removes a site from the manager.
     *
     * @param Command The current DeleteSite Command Execution Wrapper
     * It contains the following Parameters:
     * @li SiteId The site to delete.
     *
     * @return DeleteSite_Responses The Command Response
     * It contains the following fields:
     * None
     *
     * @throw Validation Error if the given Parameter(s) are invalid
     */
    sila2::de::fau::robot::sitemanager::v1::DeleteSite_Responses DeleteSite(DeleteSiteWrapper* command);

    bool hasSiteId(const std::string& siteId) const;
    Site getSite(const std::string& siteId) const;

private:
    GetSiteCommand m_GetSiteCommand;
    SetSiteCommand m_SetSiteCommand;
    DeleteSiteCommand m_DeleteSiteCommand;
    SitesProperty m_SitesProperty;
    std::map<std::string, nlohmann::json> m_JsonSites;
    const std::filesystem::path m_SitesDir;

    static std::map<std::string, nlohmann::json> loadSiteFilesToMap();
};

#endif  // SITEMANAGERIMPL_H
